// ABOUTME: SlideControlBar 組件的單元測試
// ABOUTME: 測試導航按鈕、縮放控制和工具列功能

import { describe, it, expect, beforeEach, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { SlideControlBar } from './SlideControlBar';
import { SlideNavigationControls } from '@/types/slidePreview';

// Mock Lucide React icons
vi.mock('lucide-react', () => ({
  ChevronLeft: () => <div data-testid="chevron-left" />,
  ChevronRight: () => <div data-testid="chevron-right" />,
  SkipBack: () => <div data-testid="skip-back" />,
  SkipForward: () => <div data-testid="skip-forward" />,
  ZoomIn: () => <div data-testid="zoom-in" />,
  ZoomOut: () => <div data-testid="zoom-out" />,
  RotateCcw: () => <div data-testid="rotate-ccw" />,
  Maximize2: () => <div data-testid="maximize2" />,
  Minimize2: () => <div data-testid="minimize2" />,
  Grid3X3: () => <div data-testid="grid3x3" />,
  Minus: () => <div data-testid="minus" />,
  Plus: () => <div data-testid="plus" />,
}));

// Mock Button component
vi.mock('@/components/ui/button', () => ({
  Button: ({
    children,
    onClick,
    disabled,
    title,
    className,
    ...props
  }: {
    children: React.ReactNode;
    onClick?: () => void;
    disabled?: boolean;
    title?: string;
    className?: string;
    [key: string]: unknown;
  }) => (
    <button
      onClick={onClick}
      disabled={disabled}
      title={title}
      className={className}
      {...props}
    >
      {children}
    </button>
  ),
}));

describe('SlideControlBar', () => {
  const mockNavigation: SlideNavigationControls = {
    goToPrevious: vi.fn(),
    goToNext: vi.fn(),
    goToFirst: vi.fn(),
    goToLast: vi.fn(),
    goToSlide: vi.fn(),
    canGoPrevious: true,
    canGoNext: true,
  };

  const mockZoom: SlideZoomControls = {
    zoomIn: vi.fn(),
    zoomOut: vi.fn(),
    resetZoom: vi.fn(),
    setZoom: vi.fn(),
    fitToWindow: vi.fn(),
    currentZoom: 1,
    availableZoomLevels: [0.25, 0.5, 0.75, 1, 1.25, 1.5, 2],
  };

  const mockSlideInfo = {
    current: 0,
    total: 3,
  };

  const mockOnThumbnailToggle = vi.fn();
  const mockOnFullscreenToggle = vi.fn();

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('基本渲染', () => {
    it('應渲染控制列', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      // 檢查導航按鈕
      expect(screen.getByTestId('skip-back')).toBeInTheDocument();
      expect(screen.getByTestId('chevron-left')).toBeInTheDocument();
      expect(screen.getByTestId('chevron-right')).toBeInTheDocument();
      expect(screen.getByTestId('skip-forward')).toBeInTheDocument();
    });

    it('應顯示投影片計數器', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      expect(screen.getByText('1 / 3')).toBeInTheDocument();
    });

    it('應顯示縮放控制', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      expect(screen.getByTestId('minus')).toBeInTheDocument();
      expect(screen.getByTestId('plus')).toBeInTheDocument();
      expect(screen.getByTestId('rotate-ccw')).toBeInTheDocument();
      expect(screen.getByText('100%')).toBeInTheDocument();
    });
  });

  describe('導航控制', () => {
    it('應能點擊上一張按鈕', async () => {
      const user = userEvent.setup();

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const prevButton = screen.getByTestId('chevron-left').closest('button');
      await user.click(prevButton!);

      expect(mockNavigation.goToPrevious).toHaveBeenCalled();
    });

    it('應能點擊下一張按鈕', async () => {
      const user = userEvent.setup();

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const nextButton = screen.getByTestId('chevron-right').closest('button');
      await user.click(nextButton!);

      expect(mockNavigation.goToNext).toHaveBeenCalled();
    });

    it('應能點擊第一張按鈕', async () => {
      const user = userEvent.setup();

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const firstButton = screen.getByTestId('skip-back').closest('button');
      await user.click(firstButton!);

      expect(mockNavigation.goToFirst).toHaveBeenCalled();
    });

    it('應能點擊最後一張按鈕', async () => {
      const user = userEvent.setup();

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const lastButton = screen.getByTestId('skip-forward').closest('button');
      await user.click(lastButton!);

      expect(mockNavigation.goToLast).toHaveBeenCalled();
    });

    it('應正確禁用導航按鈕', () => {
      const disabledNavigation = {
        ...mockNavigation,
        canGoPrevious: false,
        canGoNext: false,
      };

      render(
        <SlideControlBar
          navigation={disabledNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const prevButton = screen.getByTestId('chevron-left').closest('button');
      const nextButton = screen.getByTestId('chevron-right').closest('button');
      const firstButton = screen.getByTestId('skip-back').closest('button');
      const lastButton = screen.getByTestId('skip-forward').closest('button');

      expect(prevButton).toBeDisabled();
      expect(nextButton).toBeDisabled();
      expect(firstButton).toBeDisabled();
      expect(lastButton).toBeDisabled();
    });
  });

  describe('縮放控制', () => {
    it('應能點擊放大按鈕', async () => {
      const user = userEvent.setup();

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const zoomInButton = screen.getByTestId('plus').closest('button');
      await user.click(zoomInButton!);

      expect(mockZoom.zoomIn).toHaveBeenCalled();
    });

    it('應能點擊縮小按鈕', async () => {
      const user = userEvent.setup();

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const zoomOutButton = screen.getByTestId('minus').closest('button');
      await user.click(zoomOutButton!);

      expect(mockZoom.zoomOut).toHaveBeenCalled();
    });

    it('應能點擊重置縮放按鈕', async () => {
      const user = userEvent.setup();

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const resetZoomButton = screen
        .getByTestId('rotate-ccw')
        .closest('button');
      await user.click(resetZoomButton!);

      expect(mockZoom.resetZoom).toHaveBeenCalled();
    });

    it('應顯示正確的縮放百分比', () => {
      const customZoom = {
        ...mockZoom,
        currentZoom: 1.5,
      };

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={customZoom}
          slideInfo={mockSlideInfo}
        />
      );

      expect(screen.getByText('150%')).toBeInTheDocument();
    });

    it('應在最小縮放時禁用縮小按鈕', () => {
      const minZoom = {
        ...mockZoom,
        currentZoom: 0.25, // 最小縮放級別
      };

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={minZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const zoomOutButton = screen.getByTestId('minus').closest('button');
      expect(zoomOutButton).toBeDisabled();
    });

    it('應在最大縮放時禁用放大按鈕', () => {
      const maxZoom = {
        ...mockZoom,
        currentZoom: 2, // 最大縮放級別
      };

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={maxZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const zoomInButton = screen.getByTestId('plus').closest('button');
      expect(zoomInButton).toBeDisabled();
    });
  });

  describe('縮圖面板控制', () => {
    it('應顯示縮圖切換按鈕', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
          showThumbnailToggle={true}
          onThumbnailToggle={mockOnThumbnailToggle}
        />
      );

      expect(screen.getByTestId('grid3x3')).toBeInTheDocument();
    });

    it('應能點擊縮圖切換按鈕', async () => {
      const user = userEvent.setup();

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
          showThumbnailToggle={true}
          onThumbnailToggle={mockOnThumbnailToggle}
        />
      );

      const toggleButton = screen.getByTestId('grid3x3').closest('button');
      await user.click(toggleButton!);

      expect(mockOnThumbnailToggle).toHaveBeenCalled();
    });

    it('應隱藏縮圖切換按鈕', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
          showThumbnailToggle={false}
        />
      );

      expect(screen.queryByTestId('grid3x3')).not.toBeInTheDocument();
    });

    it('應在縮圖顯示時高亮切換按鈕', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
          showThumbnailToggle={true}
          thumbnailsVisible={true}
          onThumbnailToggle={mockOnThumbnailToggle}
        />
      );

      const toggleButton = screen.getByTestId('grid3x3').closest('button');
      expect(toggleButton).toHaveClass('bg-muted');
    });
  });

  describe('全螢幕控制', () => {
    it('應顯示全螢幕按鈕', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
          onFullscreenToggle={mockOnFullscreenToggle}
        />
      );

      expect(screen.getByTestId('maximize2')).toBeInTheDocument();
    });

    it('應能點擊全螢幕按鈕', async () => {
      const user = userEvent.setup();

      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
          onFullscreenToggle={mockOnFullscreenToggle}
        />
      );

      const fullscreenButton = screen
        .getByTestId('maximize2')
        .closest('button');
      await user.click(fullscreenButton!);

      expect(mockOnFullscreenToggle).toHaveBeenCalled();
    });

    it('應在全螢幕模式下顯示退出圖示', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
          onFullscreenToggle={mockOnFullscreenToggle}
          isFullscreen={true}
        />
      );

      expect(screen.getByTestId('minimize2')).toBeInTheDocument();
      expect(screen.queryByTestId('maximize2')).not.toBeInTheDocument();
    });
  });

  describe('工具提示', () => {
    it('應提供適當的工具提示', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      expect(screen.getByTitle('第一張投影片 (Home)')).toBeInTheDocument();
      expect(screen.getByTitle('上一張投影片 (←)')).toBeInTheDocument();
      expect(screen.getByTitle('下一張投影片 (→)')).toBeInTheDocument();
      expect(screen.getByTitle('最後一張投影片 (End)')).toBeInTheDocument();
      expect(screen.getByTitle('縮小 (Ctrl + -)')).toBeInTheDocument();
      expect(screen.getByTitle('放大 (Ctrl + +)')).toBeInTheDocument();
      expect(screen.getByTitle('重置縮放 (Ctrl + 0)')).toBeInTheDocument();
    });

    it('應根據全螢幕狀態更新工具提示', () => {
      const { rerender } = render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
          onFullscreenToggle={mockOnFullscreenToggle}
          isFullscreen={false}
        />
      );

      expect(screen.getByTitle('全螢幕 (F11)')).toBeInTheDocument();

      rerender(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
          onFullscreenToggle={mockOnFullscreenToggle}
          isFullscreen={true}
        />
      );

      expect(screen.getByTitle('退出全螢幕 (F11)')).toBeInTheDocument();
    });
  });

  describe('自訂樣式', () => {
    it('應支援自訂 CSS 類別', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
          className="custom-control-bar"
        />
      );

      const controlBar = document.querySelector('.custom-control-bar');
      expect(controlBar).toBeInTheDocument();
    });

    it('應包含預設佈局樣式', () => {
      render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={mockSlideInfo}
        />
      );

      const controlBar = document.querySelector(
        '.flex.items-center.justify-between'
      );
      expect(controlBar).toBeInTheDocument();
    });
  });

  describe('響應式設計', () => {
    it('應在不同投影片數量下正確更新計數器', () => {
      const { rerender } = render(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={{ current: 2, total: 5 }}
        />
      );

      expect(screen.getByText('3 / 5')).toBeInTheDocument();

      rerender(
        <SlideControlBar
          navigation={mockNavigation}
          zoom={mockZoom}
          slideInfo={{ current: 0, total: 1 }}
        />
      );

      expect(screen.getByText('1 / 1')).toBeInTheDocument();
    });
  });
});

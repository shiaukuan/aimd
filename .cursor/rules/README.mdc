---
alwaysApply: true
description: Cursor Rules 系統總覽和使用指南
---

# Cursor Rules 系統總覽

## 📋 規則檔案清單

我們建立了一套完整的 Cursor Rules 來指導 AI 開發：

### 🏗️ 1. 專案架構規則 ([project-architecture.mdc](mdc:.cursor/rules/project-architecture.mdc))

- **適用範圍**: 所有檔案 (alwaysApply: true)
- **主要內容**:
  - Next.js 15 + React 19 + TypeScript 5 技術棧
  - 檔案結構和目錄組織規範
  - 核心模組和元件架構說明
  - 重要檔案引用和相互關係

### 🔄 2. 開發流程規則 ([development-workflow.mdc](mdc:.cursor/rules/development-workflow.mdc))

- **適用範圍**: 所有檔案 (alwaysApply: true)
- **主要內容**:
  - TDD (測試驅動開發) 完整流程
  - 程式碼撰寫和提交規範
  - 繁體中文溝通要求
  - 系統性思維和品質優先原則

### 🧪 3. 測試規範 ([testing-standards.mdc](mdc:.cursor/rules/testing-standards.mdc))

- **適用範圍**: 所有檔案 (alwaysApply: true)
- **主要內容**:
  - 無例外測試政策 (unit + integration + E2E)
  - Vitest + Playwright 測試工具配置
  - TDD Red-Green-Refactor 循環
  - 效能和可存取性測試要求

### 🧩 4. 元件開發規則 ([component-development.mdc](mdc:.cursor/rules/component-development.mdc))

- **適用範圍**: 所有檔案 (alwaysApply: true)
- **主要內容**:
  - React 元件結構和命名規範
  - TypeScript 型別定義和使用規範
  - Hook 開發模式和最佳實務
  - Zustand 狀態管理規範
  - 效能最佳化和錯誤處理

### 📄 5. 檔案特定規則 ([file-specific-rules.mdc](mdc:.cursor/rules/file-specific-rules.mdc))

- **適用範圍**: TypeScript/JavaScript/JSON/Markdown 檔案 (globs: _.ts,_.tsx,_.js,_.jsx,_.json,_.md)
- **主要內容**:
  - 各類檔案的結構和格式規範
  - 匯入/匯出順序和規範
  - 註解和命名規範
  - 測試檔案組織規範

## 🎯 關鍵開發原則摘要

### 🔴 絕對禁止的行為

1. **急於解決**: 跳過理解和分析步驟
2. **忽略測試**: 不寫測試或跳過測試驗證
3. **無關變更**: 做與當前任務無關的程式碼修改
4. **移除註解**: 移除既有程式碼註解
5. **使用 --no-verify**: 提交時繞過檢查
6. **未經許可重寫**: 丟棄舊實作進行重寫

### ✅ 必須執行的行為

1. **繁體中文**: 所有溝通和註解使用繁體中文
2. **ABOUTME 註解**: 每個檔案都要有兩行說明註解
3. **完整測試**: 執行 `pnpm test && pnpm test:e2e` 驗證
4. **TDD 流程**: 先寫測試，再寫實作，最後重構
5. **型別安全**: 使用完整的 TypeScript 型別定義

## 🔄 標準開發流程

```bash
# 1. 理解階段 - 查閱文件
docs/project-architecture-for-ai.md
docs/codebase-architecture.md

# 2. 測試階段 - 撰寫失敗測試
pnpm test <specific-test-file>

# 3. 實作階段 - 最小實作
pnpm test <specific-test-file>

# 4. 完成階段 - 完整驗證
pnpm test && pnpm test:e2e
```

## 📂 重要檔案快速參考

### 🏗️ 架構檔案

- [專案架構說明](mdc:docs/project-architecture-for-ai.md)
- [程式碼架構文件](mdc:docs/codebase-architecture.md)
- [開發指令說明](mdc:CLAUDE.md)

### 🔧 配置檔案

- [Package.json](mdc:package.json) - 專案依賴和腳本
- [TypeScript 配置](mdc:tsconfig.json) - 型別檢查設定
- [Vitest 配置](mdc:vitest.config.ts) - 單元測試設定
- [Playwright 配置](mdc:playwright.config.ts) - E2E 測試設定

### 📊 核心模組

- [型別定義](mdc:src/types/index.ts) - 完整 TypeScript 型別
- [編輯器狀態](mdc:src/store/editorStore.ts) - Zustand 狀態管理
- [Marp 引擎](mdc:src/lib/marp.ts) - 投影片渲染引擎
- [驗證系統](mdc:src/lib/validations.ts) - Zod 驗證 schemas

### 🧩 主要元件

- [編輯器面板](mdc:src/components/editor/EditorPanel.tsx)
- [投影片預覽](mdc:src/components/preview/SlidePreview.tsx)
- [UI 元件](mdc:src/components/ui/) - shadcn/ui 元件庫

### 🪝 重要 Hooks

- [Marp 渲染器](mdc:src/hooks/useMarpRenderer.ts)
- [投影片控制](mdc:src/hooks/useSlideControls.ts)
- [自動儲存](mdc:src/hooks/useAutoSave.ts)

## 🎨 技術棧快速參考

```typescript
// 主要技術組合
Next.js 15.4.5      // App Router 架構
React 19.1.0        // 最新 React 版本
TypeScript 5        // 嚴格模式
Tailwind CSS v4     // 樣式系統
shadcn/ui          // UI 元件庫
Zustand 5.0.7      // 狀態管理
Vitest 3.2.4       // 單元測試
Playwright 1.54.1  // E2E 測試
@marp-team/marp-core // 投影片引擎
```

## 🚨 緊急參考

如果 AI 不確定如何處理某個情況，請：

1. **查閱相關規則檔案** - 使用上述檔案連結
2. **參考既有實作** - 查看 `src/` 目錄中的相似檔案
3. **遵循 TDD** - 先寫測試再實作
4. **保持簡單** - 選擇最簡潔的解決方案
5. **尋求澄清** - 主動詢問而非假設

---

📅 **最後更新**: 2025年7月  
🤖 **目標**: 確保 AI 能夠高效且一致地開發這個 Markdown 投影片編輯器專案

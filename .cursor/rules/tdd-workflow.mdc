---
alwaysApply: true
description: TDD 工作流程和實踐指南
---

# TDD 工作流程和實踐指南

我們採用 **文件與測試驅動開發 (Documentation & Test-Driven Development)** 的流程。

## 1. 理解與分析 (Understand & Analyze)

- ❌ **絕對禁止**：急於動手、跳過分析步驟
- **查閱文件**：首先查閱 `docs/` 目錄下的既有文件，了解目前的設計與架構
- **分析需求**：徹底分析問題的根本原因

## 2. 文件與測試 (Document & Test - Red Phase 🔴)

- **更新文件**：如有架構變更或新增功能，先在 `docs/` 中草擬文件或更新現有文件
- **撰寫失敗測試**：為新功能撰寫一個明確描述期望行為的失敗測試
- **執行單一測試**：為求快速反饋，執行 `pnpm test <相關測試檔案>` 來確認該測試如預期般失敗

## 3. 撰寫程式碼 (Code - Green Phase 🟢)

- **最小實作**：只寫足夠的程式碼讓測試通過
- **遵循規範**：遵守程式碼撰寫規範
- **快速驗證**：再次執行 `pnpm test <相關測試檔案>` 確認測試轉為綠色

## 4. 重構與交付 (Refactor & Deliver 🔧)

- **持續重構**：在單一測試保護下，持續改進程式碼的可讀性與設計，並隨時執行 `pnpm test <相關測試檔案>` 保持測試通過
- **完善文件**：最終完善 `docs/` 中的文件，確保與實作一致，包含使用範例和設計理念
- **✅ 最終完整驗證 (Final Verification)**：在完成所有變更後，**務必執行完整的測試套件** `pnpm test` 及 `pnpm test:e2e`，確保沒有任何回歸問題 (regression) 並保證所有測試完美通過

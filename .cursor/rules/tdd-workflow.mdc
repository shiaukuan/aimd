---
alwaysApply: true
description: Test-Driven Development (TDD) 工作流程
---

# TDD 實踐指南

## TDD 核心理念

我們實踐 **TDD（Test-Driven Development）**，這意味著：

- 🔴 **在寫實作程式碼之前先寫測試**
- 🟢 **只寫足夠的程式碼來讓失敗的測試通過**
- 🔧 **在確保測試仍然通過的同時持續重構程式碼**

## TDD 實作流程

### 1. 🔴 Red - 寫失敗的測試

- 寫一個失敗的測試來定義期望的功能或改進
- 執行測試以確認它如預期失敗
- 測試應該明確描述期望的行為

### 2. 🟢 Green - 讓測試通過

- 寫**最少的程式碼**來讓測試通過
- 不要過度設計或添加額外功能
- 專注於滿足測試要求

### 3. 🔧 Refactor - 重構改進

- 重構程式碼以改進設計
- 保持測試為綠色狀態
- 改善可讀性和可維護性

### 4. 🔄 重複循環

為每個新功能或 bugfix 重複這個循環

## 實際執行步驟

```bash
# 每個 TDD 循環都要執行
pnpm test        # 確認測試狀態
pnpm test:e2e    # 確認端對端功能
```

## TDD 的好處

- **明確的需求定義**：測試就是活文檔
- **迅速反饋**：立即知道程式碼是否正確
- **重構信心**：有測試保護的重構更安全
- **更好的設計**：先考慮介面再實作

## 相關測試檔案

- 單元測試：[src/](mdc:src/) 目錄下的 `*.test.ts` 檔案
- 端對端測試：[tests/](mdc:tests/) 目錄
- 測試配置：[vitest.config.ts](mdc:vitest.config.ts) 和 [playwright.config.ts](mdc:playwright.config.ts)

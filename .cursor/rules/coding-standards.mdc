---
globs: *.ts,*.tsx,*.js,*.jsx,*.vue,*.py,*.java,*.c,*.cpp,*.cs,*.go,*.rs,*.php
description: 程式碼撰寫標準和規範
---

# 程式碼撰寫標準

## 基本原則

- **重要**：提交程式碼時絕不使用 `--no-verify`
- 做**最小的合理變更**來達到期望的結果
- 修改程式碼時，要符合周圍程式碼的風格和格式，即使它與標準風格指南不同
- **檔案內的一致性**比嚴格遵守外部標準更重要

## 程式碼變更限制

- ❌ **絕不要做與目前任務無關的程式碼變更**
- ❌ **絕不要移除程式碼註解**，除非能證明它們是完全錯誤的
- 註解是重要的文件，即使看似多餘也應該保留
- 修復 bug 或錯誤時，**絕不能在沒有使用者明確許可的情況下丟棄舊實作並重寫**

## 註解規範

### 檔案開頭註解

所有程式碼檔案都應該以簡短的 2 行註解開始，解釋檔案的作用：

```
// ABOUTME: 此檔案負責處理使用者認證相關功能
// ABOUTME: 包含登入、登出和權限驗證的核心邏輯
```

- 每一行都以 `ABOUTME: ` 開始（便於 grep 搜尋）
- 使用繁體中文撰寫

### 註解內容原則

- 避免引用重構或最近變更的時間背景
- 註解應該是**永恆的**，描述程式碼現在的樣子
- 不要描述程式碼如何演變或最近如何變更

## 命名規範

❌ **絕不要使用以下命名**：

- "improved" / "new" / "enhanced" / "better" / "fixed"
- 任何暗示時間性的詞彙

✅ **程式碼命名應該是永恆的**：

- 描述功能本身，而非其發展狀態
- 今天新的東西總有一天會變「舊」

## 程式碼結構

參考相關檔案：

- 專案配置：[package.json](mdc:package.json)
- TypeScript 設定：[tsconfig.json](mdc:tsconfig.json)
- ESLint 規則：[eslint.config.mjs](mdc:eslint.config.mjs)

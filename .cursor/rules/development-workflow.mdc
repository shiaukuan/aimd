---
alwaysApply: true
description: TDD 開發流程和程式碼品質規範
---

# 開發流程規範

## 核心開發原則

### 🎯 系統性思維

- 看到具體問題時，思考對整個系統的影響
- 評估技術債務和維護成本
- 優先選擇簡單、乾淨、可維護的解決方案
- **絕對禁止**：急於給出解決方案、跳過搜索和理解步驟

### 💡 品質優先

- 可讀性和可維護性是首要考量
- 偏好簡單解決方案勝過聰明或複雜的方案
- 做最小的合理變更來達到期望結果
- 符合周圍程式碼的風格和格式

## TDD 開發流程

我們採用 **文件與測試驅動開發 (Documentation & Test-Driven Development)** 流程：

### 1. 🔍 理解與分析 (Understand & Analyze)

```bash
# 查閱既有文件
docs/project-architecture-for-ai.md
docs/codebase-architecture.md
docs/testing-setup-tutorial.md
```

- **必須先做**：查閱 `docs/` 目錄了解現有設計
- **徹底分析**：分析問題的根本原因
- **禁止行為**：急於動手、跳過分析步驟

### 2. 🔴 文件與測試 (Document & Test - Red Phase)

```bash
# 執行單一測試確認失敗
pnpm test <相關測試檔案>
```

- **更新文件**：架構變更時先草擬或更新 `docs/` 文件
- **撰寫失敗測試**：明確描述期望行為的測試
- **快速驗證**：執行單一測試檔案確認測試失敗

### 3. 🟢 撰寫程式碼 (Code - Green Phase)

```bash
# 快速驗證測試通過
pnpm test <相關測試檔案>
```

- **最小實作**：只寫足夠讓測試通過的程式碼
- **遵循規範**：按照下述「程式碼撰寫規範」
- **即時驗證**：確認測試轉為綠色

### 4. 🔧 重構與交付 (Refactor & Deliver)

```bash
# 最終完整驗證（強制執行）
pnpm test && pnpm test:e2e
```

- **持續重構**：在測試保護下改進程式碼
- **完善文件**：確保文件與實作一致
- **✅ 強制驗證**：**務必執行完整測試套件**，確保無回歸問題

## 程式碼撰寫規範

### 🔧 基本原則

- **提交限制**：絕不使用 `--no-verify` 提交程式碼
- **最小變更**：只做與當前任務直接相關的變更
- **風格一致**：檔案內一致性優於外部標準
- **變更限制**：絕不做與被指派任務無關的程式碼變更

### 💬 註解規範

```typescript
// ABOUTME: 此檔案負責管理投影片編輯器的主要狀態
// ABOUTME: 包含內容同步、儲存狀態和錯誤處理邏輯
```

- **強制格式**：所有檔案都需以 `// ABOUTME:` 開頭的兩行註解
- **永恆描述**：描述檔案現在的樣子，避免時間背景
- **保護既有**：絕不移除程式碼註解，除非完全錯誤
- **語言規範**：所有註解使用**繁體中文**

### 🏷️ 命名規範

- **永恆命名**：避免 `new`、`improved`、`enhanced` 等時間性詞彙
- **功能描述**：命名應描述功能本身
- **一致性**：遵循既有的命名慣例

### 🔄 重寫限制

- **禁止行為**：未經明確許可，絕不丟棄舊實作重寫
- **必須停止**：需要重寫時必須停下來獲得使用者許可
- **保護實作**：即使程式碼看似多餘或不必要也應保留

## 溝通規範

### 🗣️ 語言規範

- **統一語言**：所有溝通、註解、文件使用**繁體中文**
- **主動澄清**：總是要求澄清而不是做假設
- **尋求幫助**：遇到困難時停下來尋求幫助是可以的

### 📋 文件規範

參考重要文件：

- [開發指令說明](mdc:CLAUDE.md)
- [專案架構說明](mdc:docs/project-architecture-for-ai.md)
- [測試設定教學](mdc:docs/testing-setup-tutorial.md)

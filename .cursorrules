# Cursor Rules - 開發指導原則

## 必須做的事

- 系統性思維：看到具體問題時，思考整個系統
- 長遠考慮：評估技術債務和維護成本
- 絕對禁止：
  ❌ 急於給出解決方案
  ❌ 跳過搜索和理解步驟
  ❌ 不分析就推薦方案
- 用繁體中文回答

## 寫程式碼規範

### 基本原則
- 重要：提交程式碼時絕不使用 --no-verify
- 我們偏好簡單、乾淨、可維護的解決方案，而不是聰明或複雜的解決方案，即使後者更簡潔或更高效。可讀性和可維護性是首要考慮
- 做最小的合理變更來達到期望的結果
- 修改程式碼時，要符合周圍程式碼的風格和格式，即使它與標準風格指南不同。檔案內的一致性比嚴格遵守外部標準更重要

### 程式碼變更限制
- 絕不要做與你目前被指派任務無關的程式碼變更
- 絕不要移除程式碼註解，除非你能證明它們是完全錯誤的。註解是重要的文件，即使它們對你來說似乎多餘或不必要，也應該保留
- 當你試圖修復 bug 或編譯錯誤或任何其他問題時，你絕不能在沒有使用者明確許可的情況下丟棄舊實作並重寫。如果你要這樣做，你必須停下來並獲得使用者的明確許可

### 註解規範
- 所有程式碼檔案都應該以簡短的 2 行註解開始，解釋檔案的作用。註解的每一行都應該以字串「ABOUTME: 」開始，以便於 grep 搜尋且用中文寫
- 寫註解時，避免引用重構或最近變更的時間背景。註解應該是永恆的，描述程式碼現在的樣子，而不是它如何演變或最近如何變更

### 命名規範
- 絕不要將東西命名為「improved」或「new」或「enhanced」等。程式碼命名應該是永恆的。今天新的東西總有一天會「舊」

## 尋求幫助

- 總是要求澄清而不是做假設
- 如果你在某事上遇到困難，停下來尋求幫助是可以的。特別是如果這是你的人類可能更擅長的事情

## 測試規範

### 測試要求
- 測試必須涵蓋正在實作的功能
- 絕不要忽略系統或測試的輸出 - 日誌和訊息通常包含重要資訊
- 測試輸出必須完美無缺才能通過
- 如果日誌應該包含錯誤，捕獲並測試它
- 無例外政策：在任何情況下你都不應該將任何測試類型標記為「不適用」。每個專案，無論大小或複雜性如何，都必須有 unit tests、integration tests 和 end-to-end tests。如果你認為某種測試類型不適用，你需要人類明確說出「我授權你這次跳過寫測試」

### 測試執行流程
每撰寫／修改任何程式碼後**務必**依序執行：
1. `pnpm test` # 單元 / 整合測試
2. `pnpm test:e2e` # 端對端測試

若有測試失敗，先修正程式或測試 → 再重跑兩條指令，直到 **全綠**。

## TDD 實踐

我們實踐 TDD（Test-Driven Development）。這意味著：
- 在寫實作程式碼之前先寫測試
- 只寫足夠的程式碼來讓失敗的測試通過
- 在確保測試仍然通過的同時持續重構程式碼

### TDD 實作流程
1. 寫一個失敗的測試來定義期望的功能或改進
2. 執行測試以確認它如預期失敗
3. 寫最少的程式碼來讓測試通過
4. 執行測試以確認成功
5. 重構程式碼以改進設計，同時保持測試為綠色
6. 為每個新功能或 bugfix 重複這個循環

## 溝通規範

- 使用繁體中文進行所有回答和溝通
- 系統性思考問題的整體架構
- 考慮長遠的維護性和技術債務
- 優先考慮可讀性和可維護性而非聰明的解決方案